name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Host Databases, Run Tests, and Upload Coverage Reports

    steps:
    - uses: actions/checkout@v4

    # Install Docker
    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install -y docker-ce

    # Install Docker Compose
    - name: Install Docker Compose
      run: |
        DOCKER_COMPOSE_VERSION=1.29.2  # Specify the desired version
        sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose


    # Verify installations
    - name: Verify Docker and Docker Compose Installation
      run: |
        docker --version
        docker-compose --version

    - name: Build and Start Docker Containers
      run: |
        docker-compose -f ./docker-compose.yaml up -d
    
    # Wait for the databases to be healthy
    - name: Wait for Databases to be Ready
      run: |
        for port in 5432 5433; do
          until nc -z localhost $port; do   
            sleep 1 # wait for 1 second before checking again
          done
        done

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Install and configure Poetry
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Load cached venv if cache exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # Install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --verbose --no-interaction --no-root

    # Install your root project if required
    - name: Install project
      run: poetry install --verbose --no-interaction

    # Run tests and generate coverage report
    - name: Run Tests with Coverage
      run: |
        poetry run pytest --cov=pgutils tests/
        # Save coverage report to a specific file
        mkdir -p coverage-reports
        mv .coverage coverage-reports/coverage.xml

    # Stop and remove the containers after tests
    - name: Stop Docker Containers
      run: docker-compose -f docker-compose.yaml down

    # Upload Coverage Report to Codecov
    - name: Upload Coverage Reports to Codecov
      run: |
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f coverage-reports/coverage.xml
