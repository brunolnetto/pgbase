name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    name: Host Databases, Run Tests, and Upload Coverage Reports

    services:
      db1:
        image: postgres:latest
        env:
          POSTGRES_DB: db1
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 5s 
          --health-timeout 2s 
          --health-retries 5

      db2:
        image: postgres:latest
        env:
          POSTGRES_DB: db2
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 5s 
          --health-timeout 2s 
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install requirements
      run: pip install -r ./../../requirements.txt && pip install -r ./../../requirements_dev.txt
    #----------------------------------------------
    #       install & configure poetry  -----
    #----------------------------------------------
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    # Load cached venv if cache exists
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    # Install dependencies if cache does not exist
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --verbose --no-interaction --no-root

    # Install your root project if required
    - name: Install project
      run: poetry install --verbose --no-interaction

    # Wait for the databases to be healthy
    - name: Wait for Databases to be Ready
      run: |
        for port in 5432 5433; do
          until nc -z localhost $port; do   
            sleep 1 # wait for 1 second before checking again
          done
        done

    # Run tests and generate coverage report
    - name: Run Tests with Coverage
      run: |
        poetry run pytest --cov=pgutils tests/
        # Save coverage report to a specific file
        mkdir -p coverage-reports
        mv .coverage coverage-reports/coverage.xml

    # Upload Coverage Report to Codecov
    - name: Upload Coverage Reports to Codecov
      run: |
        # Replace `linux` below with the appropriate OS
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        chmod +x codecov
        ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f coverage-reports/coverage.xml